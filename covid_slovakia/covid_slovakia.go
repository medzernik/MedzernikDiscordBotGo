package covid_slovakia

import (
	"encoding/json"
	"fmt"
	"github.com/bwmarrin/discordgo"
	"github.com/medzernik/SlovakiaDiscordBotGo/command"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// GetCOVIDSlovakInfo TODO: Move this function elsewhere
//function takes an address of the desired type and then returns the response body in bytes to be unmarshaled later.
func GetCOVIDSlovakInfo(address string) []byte {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X GET "https://data.korona.gov.sk/api/vaccines" -H "accept: application/json"

	req, err := http.NewRequest("GET", address, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Add("charset", "utf-8")
	req.Header.Add("Accept-Charset", "utf-8")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("ERROR: ", err)
	}
	defer resp.Body.Close()
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("ERROR: ", err)
	}
	return bodyBytes
}

// COVIDVaccinesAvailable unmarshales the body into a custom struct and then prints out the result
func COVIDVaccinesAvailable(s *discordgo.Session, cmd *discordgo.InteractionCreate) {
	var err error

	type Response struct {
		Id           int    `json:"id"`
		Title        string `json:"title"`
		Manufacturer string `json:"manufacturer"`
	}

	bodyBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/vaccines")

	var currentResponse []Response
	err = json.Unmarshal(bodyBytes, &currentResponse)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING DATA: ", err)

	}

	embed := command.NewEmbed().
		SetTitle("LIST OF VACCINATION SUBSTANCES").
		SetDescription("Currently present in Slovakia")

	var output string

	for i := 0; i < len(currentResponse); i++ {
		embed = embed.AddField(currentResponse[i].Manufacturer, currentResponse[i].Title)

	}

	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK+"LIST OF VACCINATION SUBSTANCES IN SLOVAKIA", output, discordgo.EmbedTypeRich)

	messageEmbed := embed.InlineAllFields().SetColor(3066993).MessageEmbed

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)
	return
}

type Page struct {
	Id          string `json:"id"`
	Dose1Count  int    `json:"dose1_count"`
	Dose2Count  int    `json:"dose2_count"`
	Dose1Sum    int    `json:"dose1_sum"`
	Dose2Sum    int    `json:"dose2_sum"`
	UpdatedAt   string `json:"updated_at"`
	PublishedOn string `json:"published_on"`
}

type VaccinatedSlovakiaResponse struct {
	Success    bool   `json:"success"`
	NextOffset int    `json:"next_offset"`
	Page       []Page `json:"page"`
}

// COVIDNumberOfVaccinated Function to output a graph of the current vaccinated people
func COVIDNumberOfVaccinated(s *discordgo.Session, cmd *discordgo.InteractionCreate, m []interface{}) {
	var err error

	//?updated_since=2021-10-13%2012%3A34%3A56

	var year, month, day = time.Now().AddDate(0, -5, 0).Date()
	var requestedDate string = strconv.FormatInt(int64(year), 10) + "-" + strconv.FormatInt(int64(month), 10) + "-" + strconv.FormatInt(int64(day), 10) + "%2000%3A00%3A01"
	dateStringStart := strconv.FormatInt(int64(year), 10) + "-" + strconv.FormatInt(int64(month), 10) + "-" + strconv.FormatInt(int64(day), 10)
	var dateStringEnd string
	//var parsedDate string = "2021-10-13%2012%3A34%3A56"

	bodyBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/vaccinations/in-slovakia?updated_since=" + requestedDate)
	fmt.Println(string(bodyBytes))

	var currentResponse VaccinatedSlovakiaResponse
	err = json.Unmarshal(bodyBytes, &currentResponse)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING DATA: ", err)
	}

	embed := command.NewEmbed().
		SetTitle("ROZLOŽENIE PACIENTOV S COVID")

	var dose2Count []float64

	for i, j := range currentResponse.Page {
		if i == 0 {
			dateStringEnd = strings.Split(j.UpdatedAt, " ")[0]
			embed = embed.SetDescription(j.UpdatedAt)
			embed = embed.AddField("Administrovaná 1. dávka", strconv.FormatInt(int64(j.Dose1Count), 10))
			embed = embed.AddField("Celkový počet 1. dávky", strconv.FormatInt(int64(j.Dose1Sum), 10))
			embed = embed.AddField("Administrovaná 2. dávka", strconv.FormatInt(int64(j.Dose2Count), 10))
			embed = embed.AddField("Celkový počet 2. dávky", strconv.FormatInt(int64(j.Dose2Sum), 10))

		}
		dose2Count = append(dose2Count, float64(j.Dose2Count))
	}

	messageEmbed := embed.InlineAllFields().SetColor(3066993).MessageEmbed

	graph := PrintLineASCII(dose2Count, dateStringStart, dateStringEnd)

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)
	//s.ChannelMessageSend(cmd.ChannelID, "**Celkový trend podania 2. dávky od mesiaca "+month.String()+"**\n```go\n"+graph+"```")
	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK, "**Celkový trend podania 2. dávky od mesiaca "+month.String()+GetGraphReadyForDiscordPrint(graph), discordgo.EmbedTypeRich)
	return

}

func COVIDSlovakiaCapacity(s *discordgo.Session, cmd *discordgo.InteractionCreate) {
	type PatientsInfo struct {
		Success    bool `json:"success"`
		NextOffset int  `json:"next_offset"`
		Page       []struct {
			HospitalId         int    `json:"hospital_id"`
			Id                 int    `json:"id"`
			ReportedAt         string `json:"reported_at"`
			UpdatedAt          string `json:"updated_at"`
			PublishedOn        string `json:"published_on"`
			CapacityAll        int    `json:"capacity_all"`
			FreeAll            int    `json:"free_all"`
			CapacityCovid      int    `json:"capacity_covid"`
			OccupiedJisCovid   int    `json:"occupied_jis_covid"`
			OccupiedOaimCovid  int    `json:"occupied_oaim_covid"`
			OccupiedO2Covid    int    `json:"occupied_o2_covid"`
			OccupiedOtherCovid int    `json:"occupied_other_covid"`
		} `json:"page"`
	}

	var year, month, day = time.Now().AddDate(0, -5, 0).Date()
	var requestedDate string = strconv.FormatInt(int64(year), 10) + "-" + strconv.FormatInt(int64(month), 10) + "-" + strconv.FormatInt(int64(day), 10) + "%2000%3A00%3A01"

	dateStringStart := strconv.FormatInt(int64(year), 10) + "-" + strconv.FormatInt(int64(month), 10) + "-" + strconv.FormatInt(int64(day), 10)
	var dateStringEnd string
	//var parsedDate string = "2021-10-13%2012%3A34%3A56"

	patientsInfoBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/hospital-beds/in-slovakia?updated_since=" + requestedDate)

	var patientsInfoUnmarshaled PatientsInfo
	err := json.Unmarshal(patientsInfoBytes, &patientsInfoUnmarshaled)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING: ", err)
	}

	var totalCovidPeople []float64
	embed := command.NewEmbed().
		SetTitle("ROZLOŽENIE PACIENTOV S COVID")

	for i, j := range patientsInfoUnmarshaled.Page {
		if i == 0 {
			embed = embed.SetDescription(j.UpdatedAt)
			dateStringEnd = strings.Split(j.UpdatedAt, " ")[0]
			embed = embed.AddField("Celková kapacita", strconv.FormatInt(int64(j.CapacityAll), 10))
			embed = embed.AddField("Celkové voľné miesta", strconv.FormatInt(int64(j.FreeAll), 10))
			embed = embed.AddField("Kapacita COVID", strconv.FormatInt(int64(j.CapacityCovid), 10))
			embed = embed.AddField("Zaplnenie JIS", strconv.FormatInt(int64(j.OccupiedJisCovid), 10))
			embed = embed.AddField("Zaplnenie ÁRO", strconv.FormatInt(int64(j.OccupiedOaimCovid), 10))
			embed = embed.AddField("Zaplnenie kyslíkových lôžok", strconv.FormatInt(int64(j.OccupiedO2Covid), 10))
			embed = embed.AddField("Zaplnenie obyčajných lôžok", strconv.FormatInt(int64(j.OccupiedOtherCovid), 10))

		}
		totalCovidPeople = append(totalCovidPeople, float64(j.OccupiedO2Covid+j.OccupiedJisCovid+j.OccupiedOtherCovid+j.OccupiedOaimCovid))
	}

	for i, j := 0, len(totalCovidPeople)-1; i < j; i, j = i+1, j-1 {
		totalCovidPeople[i], totalCovidPeople[j] = totalCovidPeople[j], totalCovidPeople[i]
	}

	messageEmbed := embed.InlineAllFields().SetColor(3066993).MessageEmbed

	graph := PrintLineASCII(totalCovidPeople, dateStringStart, dateStringEnd)

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)

	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK, "**Celkový trend hospitalizácií od mesiaca "+month.String()+GetGraphReadyForDiscordPrint(graph), discordgo.EmbedTypeRich)
	return

}
