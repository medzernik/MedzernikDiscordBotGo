package covid_slovakia

import (
	"encoding/json"
	"fmt"
	"github.com/bwmarrin/discordgo"
	"github.com/dustin/go-humanize"
	"github.com/medzernik/SlovakiaDiscordBotGo/command"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

// GetCOVIDSlovakInfo TODO: Move this function elsewhere
//function takes an address of the desired type and then returns the response body in bytes to be unmarshaled later.
func GetCOVIDSlovakInfo(address string) []byte {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X GET "https://data.korona.gov.sk/api/vaccines" -H "accept: application/json"

	req, err := http.NewRequest("GET", address, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Add("charset", "utf-8")
	req.Header.Add("Accept-Charset", "utf-8")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("ERROR: ", err)
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			fmt.Println("ERROR CLOSING THE BODY: ", err)
		}
	}(resp.Body)
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("ERROR: ", err)
	}
	return bodyBytes
}

// COVIDVaccinesAvailable unmarshales the body into a custom struct and then prints out the result
func COVIDVaccinesAvailable(s *discordgo.Session, cmd *discordgo.InteractionCreate) {
	var err error

	type Response struct {
		Id           int    `json:"id"`
		Title        string `json:"title"`
		Manufacturer string `json:"manufacturer"`
	}

	bodyBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/vaccines")

	var currentResponse []Response
	err = json.Unmarshal(bodyBytes, &currentResponse)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING DATA: ", err)

	}

	embed := command.NewEmbed().
		SetTitle("LIST OF VACCINATION SUBSTANCES").
		SetDescription("Currently present in Slovakia")

	var output string

	for i := 0; i < len(currentResponse); i++ {
		embed = embed.AddField(currentResponse[i].Manufacturer, currentResponse[i].Title)

	}

	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK+"LIST OF VACCINATION SUBSTANCES IN SLOVAKIA", output, discordgo.EmbedTypeRich)

	messageEmbed := embed.InlineAllFields().SetColor(3066993).MessageEmbed

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)
	return
}

type Page struct {
	Id          string `json:"id"`
	Dose1Count  int    `json:"dose1_count"`
	Dose2Count  int    `json:"dose2_count"`
	Dose1Sum    int    `json:"dose1_sum"`
	Dose2Sum    int    `json:"dose2_sum"`
	UpdatedAt   string `json:"updated_at"`
	PublishedOn string `json:"published_on"`
}

type VaccinatedSlovakiaResponse struct {
	Success    bool    `json:"success"`
	NextOffset float64 `json:"next_offset"`
	Page       []Page  `json:"page"`
}

// COVIDNumberOfVaccinated Function to output a graph of the current vaccinated people
func COVIDNumberOfVaccinated(s *discordgo.Session, cmd *discordgo.InteractionCreate, m []interface{}) {
	var err error
	var yearPrint, dayPrint int
	var monthPrint time.Month

	yearRequest, monthRequest, dayRequest := time.Now().AddDate(0, -5, 0).Date()

	//?updated_since=2021-10-13%2012%3A34%3A56
	if m != nil {
		yearPrint, monthPrint, dayPrint = time.Now().AddDate(0, 0, int(m[0].(uint64))*-1).Date()
	} else {
		yearPrint, monthPrint, dayPrint = time.Now().AddDate(0, -5, 0).Date()
	}

	var requestedDate string = strconv.FormatInt(int64(yearRequest), 10) + "-" + strconv.FormatInt(int64(monthRequest), 10) + "-" + strconv.FormatInt(int64(dayRequest), 10) + "%2000%3A00%3A01"
	dateStringStart := strconv.FormatInt(int64(yearPrint), 10) + "-" + strconv.FormatInt(int64(monthPrint), 10) + "-" + strconv.FormatInt(int64(dayPrint), 10)
	var dateStringEnd string
	var datePublished time.Time
	//var parsedDate string = "2021-10-13%2012%3A34%3A56"

	bodyBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/vaccinations/in-slovakia?updated_since=" + requestedDate)
	fmt.Println(string(bodyBytes))

	var currentResponse VaccinatedSlovakiaResponse
	err = json.Unmarshal(bodyBytes, &currentResponse)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING DATA: ", err)
	}

	embed := command.NewEmbed().
		SetTitle("ROZLOŽENIE PACIENTOV S COVID")

	var dose2Count []float64

	for i, j := range currentResponse.Page {
		if i == 0 {
			dateStringEnd = strings.Split(j.UpdatedAt, " ")[0]
			embed = embed.SetDescription(j.UpdatedAt)
			embed = embed.AddField("Administrovaná 1. dávka", ":syringe: "+humanize.Comma(int64(j.Dose1Count)))
			embed = embed.AddField("Administrovaná 2. dávka", ":syringe: "+humanize.Comma(int64(j.Dose2Count))).InlineAllFields()
			embed = embed.AddField("Celkový počet 1. dávky", ":ballot_box_with_check: "+humanize.Comma(int64(j.Dose1Sum))).TruncateFields()
			embed = embed.AddField("Celkový počet 2. dávky", ":white_check_mark: "+humanize.Comma(int64(j.Dose2Sum)))
			//Don't ever touch the formatting, it took me like 15 minutes.

		}
		datePublished, err = time.Parse(time.RFC3339, j.PublishedOn+"T00:03:01Z")
		if err != nil {
			fmt.Println("ERROR PARSING TIME: ", err)
		}

		if yearPrint <= datePublished.Year() && monthPrint <= datePublished.Month() && dayPrint <= datePublished.Day() {
			dose2Count = append(dose2Count, float64(j.Dose2Count))
		}

	}

	messageEmbed := embed.SetColor(3066993).MessageEmbed

	if len(dose2Count) == 0 {
		command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.WARN+": NO DATA EXISTS", "No data exists for the set timeframe.", discordgo.EmbedTypeRich)
		return
	}
	graph := PrintLineASCII(dose2Count, dateStringStart, dateStringEnd)

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)

	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK, "**Celkový trend podania 2. dávky od "+strconv.FormatInt(int64(dayPrint), 10)+" "+monthPrint.String()+GetGraphReadyForDiscordPrint(graph), discordgo.EmbedTypeRich)
	return

}

func COVIDSlovakiaCapacity(s *discordgo.Session, cmd *discordgo.InteractionCreate, m []interface{}) {
	type PatientsInfo struct {
		Success    bool    `json:"success"`
		NextOffset float64 `json:"next_offset"`
		Page       []struct {
			HospitalId         int    `json:"hospital_id"`
			Id                 int    `json:"id"`
			ReportedAt         string `json:"reported_at"`
			UpdatedAt          string `json:"updated_at"`
			PublishedOn        string `json:"published_on"`
			CapacityAll        int    `json:"capacity_all"`
			FreeAll            int    `json:"free_all"`
			CapacityCovid      int    `json:"capacity_covid"`
			OccupiedJisCovid   int    `json:"occupied_jis_covid"`
			OccupiedOaimCovid  int    `json:"occupied_oaim_covid"`
			OccupiedO2Covid    int    `json:"occupied_o2_covid"`
			OccupiedOtherCovid int    `json:"occupied_other_covid"`
		} `json:"page"`
	}

	var err error
	var yearPrint, dayPrint int
	var monthPrint time.Month
	//var daysRequested int

	yearRequest, monthRequest, dayRequest := time.Now().AddDate(0, -5, 0).Date()

	if m != nil {
		yearPrint, monthPrint, dayPrint = time.Now().AddDate(0, 0, int(m[0].(uint64))*-1).Date()

	} else {
		yearPrint, monthPrint, dayPrint = time.Now().AddDate(0, -5, 0).Date()

	}

	var requestedDate string = strconv.FormatInt(int64(yearRequest), 10) + "-" + strconv.FormatInt(int64(monthRequest), 10) + "-" + strconv.FormatInt(int64(dayRequest), 10) + "%2000%3A00%3A01"
	//var printDate string = strconv.FormatInt(int64(yearPrint), 10) + "-" + strconv.FormatInt(int64(monthPrint), 10) + "-" + strconv.FormatInt(int64(dayPrint), 10)

	dateStringStart := strconv.FormatInt(int64(yearPrint), 10) + "-" + strconv.FormatInt(int64(monthPrint), 10) + "-" + strconv.FormatInt(int64(dayPrint), 10)
	var dateStringEnd string
	var datePublished time.Time
	//var parsedDate string = "2021-10-13%2012%3A34%3A56"

	patientsInfoBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/hospital-beds/in-slovakia?updated_since=" + requestedDate)

	var patientsInfoUnmarshaled PatientsInfo
	err = json.Unmarshal(patientsInfoBytes, &patientsInfoUnmarshaled)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING: ", err)
	}

	var totalCovidPeople []float64
	embed := command.NewEmbed().
		SetTitle("ROZLOŽENIE PACIENTOV S COVID")

	for i, j := range patientsInfoUnmarshaled.Page {
		if i == 0 {
			embed = embed.SetDescription(j.PublishedOn)
			dateStringEnd = j.PublishedOn
			embed = embed.AddField("Celková kapacita", ":hospital: "+humanize.Comma(int64(j.CapacityAll)))
			embed = embed.AddField("Celkové voľné miesta", ":bed: "+humanize.Comma(int64(j.FreeAll)))
			embed = embed.AddField("Kapacita COVID", ":microbe: "+humanize.Comma(int64(j.CapacityCovid)))
			embed = embed.AddField("Zaplnenie JIS", ":mending_heart: "+humanize.Comma(int64(j.OccupiedJisCovid)))
			embed = embed.AddField("Zaplnenie ÁRO", ":broken_heart: "+humanize.Comma(int64(j.OccupiedOaimCovid)))
			embed = embed.AddField("Zaplnenie kyslíkových lôžok", ":diving_mask: "+humanize.Comma(int64(j.OccupiedO2Covid)))
			embed = embed.AddField("Zaplnenie obyčajných lôžok", ":thermometer: "+humanize.Comma(int64(j.OccupiedOtherCovid)))

		}
		datePublished, err = time.Parse(time.RFC3339, j.PublishedOn+"T00:03:01Z")
		if err != nil {
			fmt.Println("ERROR PARSING TIME: ", err)
		}

		if yearPrint <= datePublished.Year() && monthPrint <= datePublished.Month() && dayPrint <= datePublished.Day() {
			totalCovidPeople = append(totalCovidPeople, float64(j.OccupiedO2Covid+j.OccupiedJisCovid+j.OccupiedOtherCovid+j.OccupiedOaimCovid))
		}

	}

	if len(totalCovidPeople) > 0 {
		for i, j := 0, len(totalCovidPeople)-1; i < j; i, j = i+1, j-1 {
			totalCovidPeople[i], totalCovidPeople[j] = totalCovidPeople[j], totalCovidPeople[i]
		}
	}

	messageEmbed := embed.InlineAllFields().SetColor(3066993).MessageEmbed

	if len(totalCovidPeople) == 0 {
		command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.WARN+": NO DATA EXISTS", "No data exists for the set timeframe.", discordgo.EmbedTypeRich)
		return
	}
	graph := PrintLineASCII(totalCovidPeople, dateStringStart, dateStringEnd)

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)

	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK, "**Celkový trend hospitalizácií od "+strconv.FormatInt(int64(dayPrint), 10)+" "+monthPrint.String()+GetGraphReadyForDiscordPrint(graph), discordgo.EmbedTypeRich)
	return

}

func COVIDPatientsStatus(s *discordgo.Session, cmd *discordgo.InteractionCreate, m []interface{}) {
	type PatientsInfo struct {
		Success    bool    `json:"success"`
		NextOffset float64 `json:"next_offset"`
		Page       []struct {
			OldestReportedAt string `json:"oldest_reported_at"`
			NewestReportedAt string `json:"newest_reported_at"`
			PublishedOn      string `json:"published_on"`
			Id               int    `json:"id"`
			VentilatedCovid  int    `json:"ventilated_covid"`
			NonCovid         int    `json:"non_covid"`
			ConfirmedCovid   int    `json:"confirmed_covid"`
			SuspectedCovid   int    `json:"suspected_covid"`
			UpdatedAt        string `json:"updated_at"`
		} `json:"page"`
	}

	var err error
	var yearPrint, dayPrint int
	var monthPrint time.Month
	//var daysRequested int

	yearRequest, monthRequest, dayRequest := time.Now().AddDate(0, -5, 0).Date()

	if m != nil {
		yearPrint, monthPrint, dayPrint = time.Now().AddDate(0, 0, int(m[0].(uint64))*-1).Date()

	} else {
		yearPrint, monthPrint, dayPrint = time.Now().AddDate(0, -5, 0).Date()

	}

	var requestedDate string = strconv.FormatInt(int64(yearRequest), 10) + "-" + strconv.FormatInt(int64(monthRequest), 10) + "-" + strconv.FormatInt(int64(dayRequest), 10) + "%2000%3A00%3A01"
	//var printDate string = strconv.FormatInt(int64(yearPrint), 10) + "-" + strconv.FormatInt(int64(monthPrint), 10) + "-" + strconv.FormatInt(int64(dayPrint), 10)

	dateStringStart := strconv.FormatInt(int64(yearPrint), 10) + "-" + strconv.FormatInt(int64(monthPrint), 10) + "-" + strconv.FormatInt(int64(dayPrint), 10)
	var dateStringEnd string
	var datePublished time.Time
	//var parsedDate string = "2021-10-13%2012%3A34%3A56"

	patientsInfoBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/hospital-patients/in-slovakia?updated_since=" + requestedDate)

	var patientsInfoUnmarshaled PatientsInfo
	err = json.Unmarshal(patientsInfoBytes, &patientsInfoUnmarshaled)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING: ", err)
	}

	var positiveCovidPeople []float64
	embed := command.NewEmbed().
		SetTitle("STAV TESTOV A PACIENTOV")

	for i, j := range patientsInfoUnmarshaled.Page {
		if i == 0 {
			embed = embed.SetDescription(j.PublishedOn)
			dateStringEnd = j.PublishedOn
			embed = embed.AddField("Negatívni pacienti", ":white_check_mark: "+humanize.Comma(int64(j.NonCovid)))
			embed = embed.AddField("Podozrenie na COVID", ":warning: "+humanize.Comma(int64(j.SuspectedCovid)))
			embed = embed.AddField("Pozitívni pacienti", ":microbe: "+humanize.Comma(int64(j.ConfirmedCovid)))
			embed = embed.AddField("Najnovšie hlásený", ":clock5: "+j.NewestReportedAt)

		}
		datePublished, err = time.Parse(time.RFC3339, j.PublishedOn+"T00:03:01Z")
		if err != nil {
			fmt.Println("ERROR PARSING TIME: ", err)
		}

		if yearPrint <= datePublished.Year() && monthPrint <= datePublished.Month() && dayPrint <= datePublished.Day() {
			positiveCovidPeople = append(positiveCovidPeople, float64(j.ConfirmedCovid))
		}

	}

	if len(positiveCovidPeople) > 0 {
		for i, j := 0, len(positiveCovidPeople)-1; i < j; i, j = i+1, j-1 {
			positiveCovidPeople[i], positiveCovidPeople[j] = positiveCovidPeople[j], positiveCovidPeople[i]
		}
	}

	messageEmbed := embed.InlineAllFields().SetColor(3066993).MessageEmbed

	if len(positiveCovidPeople) == 0 {
		command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.WARN+": NO DATA EXISTS", "No data exists for the set timeframe.", discordgo.EmbedTypeRich)
		return
	}
	graph := PrintLineASCII(positiveCovidPeople, dateStringStart, dateStringEnd)

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)

	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK, "**Trend pozitívnych pacientov "+strconv.FormatInt(int64(dayPrint), 10)+" "+monthPrint.String()+GetGraphReadyForDiscordPrint(graph), discordgo.EmbedTypeRich)
	return

}

func COVIDTestsStatus(s *discordgo.Session, cmd *discordgo.InteractionCreate, m []interface{}) {
	type PatientsInfo struct {
		Success    bool    `json:"success"`
		NextOffset float64 `json:"next_offset"`
		Page       []struct {
			PositivityRate float64 `json:"positivity_rate"`
			Id             string  `json:"id"`
			UpdatedAt      string  `json:"updated_at"`
			PublishedOn    string  `json:"published_on"`
			PositivesCount int     `json:"positives_count"`
			NegativesCount int     `json:"negatives_count"`
			PositivesSum   int     `json:"positives_sum"`
			NegativesSum   int     `json:"negatives_sum"`
		} `json:"page"`
	}

	var err error
	var yearPrint, dayPrint int
	var monthPrint time.Month
	//var daysRequested int

	yearRequest, monthRequest, dayRequest := time.Now().AddDate(0, -5, 0).Date()

	if m != nil {
		yearPrint, monthPrint, dayPrint = time.Now().AddDate(0, 0, int(m[0].(uint64))*-1).Date()

	} else {
		yearPrint, monthPrint, dayPrint = time.Now().AddDate(0, -5, 0).Date()

	}

	var requestedDate string = strconv.FormatInt(int64(yearRequest), 10) + "-" + strconv.FormatInt(int64(monthRequest), 10) + "-" + strconv.FormatInt(int64(dayRequest), 10) + "%2000%3A00%3A01"
	//var printDate string = strconv.FormatInt(int64(yearPrint), 10) + "-" + strconv.FormatInt(int64(monthPrint), 10) + "-" + strconv.FormatInt(int64(dayPrint), 10)

	dateStringStart := strconv.FormatInt(int64(yearPrint), 10) + "-" + strconv.FormatInt(int64(monthPrint), 10) + "-" + strconv.FormatInt(int64(dayPrint), 10)
	var dateStringEnd string
	var datePublished time.Time
	//var parsedDate string = "2021-10-13%2012%3A34%3A56"

	patientsInfoBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/ag-tests/in-slovakia?updated_since=" + requestedDate)

	var patientsInfoUnmarshaled PatientsInfo
	err = json.Unmarshal(patientsInfoBytes, &patientsInfoUnmarshaled)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING: ", err)
	}

	var positiveCovidPeople []float64
	embed := command.NewEmbed().
		SetTitle("STAV ANTIGÉNOVÝCH TESTOV")

	for i, j := range patientsInfoUnmarshaled.Page {
		if i == 0 {
			embed = embed.SetFooter(j.PublishedOn)
			dateStringEnd = j.PublishedOn
			embed = embed.AddField("Negatívni pacienti", ":white_check_mark: "+humanize.Comma(int64(j.NegativesCount)))
			embed = embed.AddField("Pozitívni pacienti", ":microbe: "+humanize.Comma(int64(j.PositivesCount)))
			embed = embed.AddField("Pozitivita", ":scales: "+strconv.FormatFloat(j.PositivityRate, 'f', 3, 64)+" %")

		}
		datePublished, err = time.Parse(time.RFC3339, j.PublishedOn+"T00:03:01Z")
		if err != nil {
			fmt.Println("ERROR PARSING TIME: ", err)
		}

		if yearPrint <= datePublished.Year() && monthPrint <= datePublished.Month() && dayPrint <= datePublished.Day() {
			positiveCovidPeople = append(positiveCovidPeople, j.PositivityRate)
		}

	}

	if len(positiveCovidPeople) > 0 {
		for i, j := 0, len(positiveCovidPeople)-1; i < j; i, j = i+1, j-1 {
			positiveCovidPeople[i], positiveCovidPeople[j] = positiveCovidPeople[j], positiveCovidPeople[i]
		}
	}

	messageEmbed := embed.InlineAllFields().SetColor(3066993).SetDescription("COVID AG Testy:\nhttps://covidforms.nczisk.sk/covid-19-patient-form_ag.php").MessageEmbed

	if len(positiveCovidPeople) == 0 {
		command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.WARN+": NO DATA EXISTS", "No data exists for the set timeframe.", discordgo.EmbedTypeRich)
		return
	}
	graph := PrintLineASCII(positiveCovidPeople, dateStringStart, dateStringEnd)

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)

	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK, "**Pozitivita testovaných výsledkov "+strconv.FormatInt(int64(dayPrint), 10)+" "+monthPrint.String()+GetGraphReadyForDiscordPrint(graph), discordgo.EmbedTypeRich)
	return

}

func COVIDDoctorsIll(s *discordgo.Session, cmd *discordgo.InteractionCreate) {
	type PatientsInfo struct {
		Success    bool    `json:"success"`
		NextOffset float64 `json:"next_offset"`
		Page       []struct {
			HospitalId           int     `json:"hospital_id"`
			Id                   int     `json:"id"`
			ReportedAt           string  `json:"reported_at"`
			OutOfWorkRatioDoctor float64 `json:"out_of_work_ratio_doctor"`
			OutOfWorkRatioNurse  float64 `json:"out_of_work_ratio_nurse"`
			OutOfWorkRatioOther  float64 `json:"out_of_work_ratio_other"`
			UpdatedAt            string  `json:"updated_at"`
			PublishedOn          string  `json:"published_on"`
		} `json:"page"`
	}

	var err error
	//var yearPrint, dayPrint int
	//var monthPrint time.Month
	//var daysRequested int

	//yearRequest, monthRequest, dayRequest := time.Now().AddDate(0, -5, 0).Date()

	//var requestedDate string = strconv.FormatInt(int64(yearRequest), 10) + "-" + strconv.FormatInt(int64(monthRequest), 10) + "-" + strconv.FormatInt(int64(dayRequest), 10) + "%2000%3A00%3A01"
	//var printDate string = strconv.FormatInt(int64(yearPrint), 10) + "-" + strconv.FormatInt(int64(monthPrint), 10) + "-" + strconv.FormatInt(int64(dayPrint), 10)

	//dateStringStart := strconv.FormatInt(int64(yearPrint), 10) + "-" + strconv.FormatInt(int64(monthPrint), 10) + "-" + strconv.FormatInt(int64(dayPrint), 10)
	//var dateStringEnd string
	//var datePublished time.Time
	//var parsedDate string = "2021-10-13%2012%3A34%3A56"

	patientsInfoBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/hospital-staff")

	var patientsInfoUnmarshaled PatientsInfo
	err = json.Unmarshal(patientsInfoBytes, &patientsInfoUnmarshaled)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING: ", err)
	}

	var positiveDoctors, positiveNurses, positiveOthers float64

	embed := command.NewEmbed().
		SetTitle("% LEKÁROV NA COVID PN")

	for _, j := range patientsInfoUnmarshaled.Page {

		embed = embed.SetDescription(j.PublishedOn)

		positiveDoctors += j.OutOfWorkRatioDoctor
		positiveNurses += j.OutOfWorkRatioNurse
		positiveOthers += j.OutOfWorkRatioOther

		if err != nil {
			fmt.Println("ERROR PARSING TIME: ", err)
		}

	}
	positiveAverage := (positiveDoctors + positiveNurses + positiveOthers) / 3

	embed = embed.AddField("Pozitívni doktori", ":stethoscope: "+strconv.FormatFloat(positiveDoctors, 'f', 3, 64)+" %")
	embed = embed.AddField("Pozitívne zdravotné sestry", ":syringe: "+strconv.FormatFloat(positiveNurses, 'f', 3, 64)+" %")
	embed = embed.AddField("Pozitívny ostatný personál", ":plunger: "+strconv.FormatFloat(positiveOthers, 'f', 3, 64)+" %")
	embed = embed.AddField("Priemer", ":scales: "+strconv.FormatFloat(positiveAverage, 'f', 3, 64)+" %")

	messageEmbed := embed.InlineAllFields().SetColor(3066993).MessageEmbed

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)
	return

}
