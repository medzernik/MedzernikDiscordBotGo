package covid_slovakia

import (
	"encoding/json"
	"fmt"
	"github.com/bwmarrin/discordgo"
	"github.com/medzernik/SlovakiaDiscordBotGo/command"
	"io/ioutil"
	"net/http"
	"strconv"
	"time"
)

// GetCOVIDSlovakInfo TODO: Move this function elsewhere
//function takes an address of the desired type and then returns the response body in bytes to be unmarshaled later.
func GetCOVIDSlovakInfo(address string) []byte {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X GET "https://data.korona.gov.sk/api/vaccines" -H "accept: application/json"

	req, err := http.NewRequest("GET", address, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Add("charset", "utf-8")
	req.Header.Add("Accept-Charset", "utf-8")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println("ERROR: ", err)
	}
	defer resp.Body.Close()
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("ERROR: ", err)
	}
	return bodyBytes
}

// COVIDVaccinesAvailable unmarshales the body into a custom struct and then prints out the result
func COVIDVaccinesAvailable(s *discordgo.Session, cmd *discordgo.InteractionCreate) {
	var err error

	type Response struct {
		Id           int    `json:"id"`
		Title        string `json:"title"`
		Manufacturer string `json:"manufacturer"`
	}

	bodyBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/vaccines")

	var currentResponse []Response
	err = json.Unmarshal(bodyBytes, &currentResponse)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING DATA: ", err)

	}

	embed := command.NewEmbed().
		SetTitle("LIST OF VACCINATION SUBSTANCES").
		SetDescription("Currently present in Slovakia")

	var output string

	for i := 0; i < len(currentResponse); i++ {
		embed = embed.AddField(currentResponse[i].Manufacturer, currentResponse[i].Title)

	}

	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK+"LIST OF VACCINATION SUBSTANCES IN SLOVAKIA", output, discordgo.EmbedTypeRich)

	messageEmbed := embed.InlineAllFields().SetColor(3066993).MessageEmbed

	s.ChannelMessageSendEmbed(cmd.ChannelID, messageEmbed)
	return
}

type Page struct {
	Id          string `json:"id"`
	Dose1Count  int    `json:"dose1_count"`
	Dose2Count  int    `json:"dose2_count"`
	Dose1Sum    int    `json:"dose1_sum"`
	Dose2Sum    int    `json:"dose2_sum"`
	UpdatedAt   string `json:"updated_at"`
	PublishedOn string `json:"published_on"`
}

type VaccinatedSlovakiaResponse struct {
	Success    bool   `json:"success"`
	NextOffset int    `json:"next_offset"`
	Page       []Page `json:"page"`
}

// COVIDNumberOfVaccinated Function to output a graph of the current vaccinated people
func COVIDNumberOfVaccinated(s *discordgo.Session, cmd *discordgo.InteractionCreate, m []interface{}) {
	var err error

	//?updated_since=2021-10-13%2012%3A34%3A56

	var year, month, day = time.Now().AddDate(0, 0, -7).Date()
	var requestedDate string = strconv.FormatInt(int64(year), 10) + "-" + strconv.FormatInt(int64(month), 10) + "-" + strconv.FormatInt(int64(day), 10) + "%2000%3A00%3A01"

	//var parsedDate string = "2021-10-13%2012%3A34%3A56"

	bodyBytes := GetCOVIDSlovakInfo("https://data.korona.gov.sk/api/vaccinations/in-slovakia?updated_since=" + requestedDate)
	fmt.Println(string(bodyBytes))

	var currentResponse VaccinatedSlovakiaResponse
	err = json.Unmarshal(bodyBytes, &currentResponse)
	if err != nil {
		fmt.Println("ERROR UNMARSHALING DATA: ", err)
	}

	if len(currentResponse.Page) == 0 {
		fmt.Println("Invalid whatever")
		command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.ERR+" CANNOT GET THE GODDAMN DATA", "Unknown error, go complain to the government to fix it.", discordgo.EmbedTypeRich)
		return
	}

	for i := range currentResponse.Page {
		fmt.Println("--------------")
		fmt.Println(currentResponse.Page[i].PublishedOn + "\n")
		fmt.Println(currentResponse.Page[i].Dose2Count)
	}

	var dose1Count []int
	var dose2Count []int

	for _, j := range currentResponse.Page {
		dose1Count = append(dose1Count, j.Dose1Count)
		dose2Count = append(dose2Count, j.Dose2Count)
	}

	output := currentResponse.Page[0].Dose2Count

	fmt.Printf("%+v\n", currentResponse)

	command.SendTextEmbedCommand(s, cmd.ChannelID, command.StatusBot.OK+"VACCINATED PEOPLE ", strconv.FormatInt(int64(output), 10), discordgo.EmbedTypeRich)

	COVIDOutputVaccinatedGraph(currentResponse)

	return
}
